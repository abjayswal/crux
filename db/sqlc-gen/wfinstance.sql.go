// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: wfinstance.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWFNewInstances = `-- name: AddWFNewInstances :many
INSERT INTO
    public.wfinstance (
        entityid, slice, app, class, workflow, step, loggedat, nextstep, parent
    )
VALUES (
        $1, $2, $3, $4, $5, unnest($6::text []), (NOW()::timestamp), $7, $8
    )
RETURNING
    id,
    loggedat,
    step
`

type AddWFNewInstancesParams struct {
	Entityid string      `json:"entityid"`
	Slice    int32       `json:"slice"`
	App      string      `json:"app"`
	Class    string      `json:"class"`
	Workflow string      `json:"workflow"`
	Step     []string    `json:"step"`
	Nextstep string      `json:"nextstep"`
	Parent   pgtype.Int4 `json:"parent"`
}

type AddWFNewInstancesRow struct {
	ID       int32            `json:"id"`
	Loggedat pgtype.Timestamp `json:"loggedat"`
	Step     string           `json:"step"`
}

func (q *Queries) AddWFNewInstances(ctx context.Context, arg AddWFNewInstancesParams) ([]AddWFNewInstancesRow, error) {
	rows, err := q.db.Query(ctx, addWFNewInstances,
		arg.Entityid,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Workflow,
		arg.Step,
		arg.Nextstep,
		arg.Parent,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AddWFNewInstancesRow
	for rows.Next() {
		var i AddWFNewInstancesRow
		if err := rows.Scan(&i.ID, &i.Loggedat, &i.Step); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteWfInstance = `-- name: DeleteWfInstance :one
WITH deleted_parents AS (
   DELETE FROM public.wfinstance
   WHERE
       (id = $1::INTEGER OR entityid = $2::TEXT)
   RETURNING parent
),
deletion_count AS (
   SELECT COUNT(*) AS cnt FROM deleted_parents
),
delete_childrens AS (
    DELETE FROM public.wfinstance
    WHERE parent IN (SELECT parent FROM deleted_parents WHERE parent IS NOT NULL)
)
SELECT 
    CASE 
        WHEN (SELECT cnt FROM deletion_count) > 0 THEN 1
        ELSE -1 
    END AS result
`

type DeleteWfInstanceParams struct {
	ID       pgtype.Int4 `json:"id"`
	Entityid pgtype.Text `json:"entityid"`
}

func (q *Queries) DeleteWfInstance(ctx context.Context, arg DeleteWfInstanceParams) (int32, error) {
	row := q.db.QueryRow(ctx, deleteWfInstance, arg.ID, arg.Entityid)
	var result int32
	err := row.Scan(&result)
	return result, err
}

const getWFINstance = `-- name: GetWFINstance :one
SELECT count(1)
FROM public.wfinstance
WHERE
    slice = $1
    AND app = $2
    AND workflow = $3
    AND entityid = $4
`

type GetWFINstanceParams struct {
	Slice    int32  `json:"slice"`
	App      string `json:"app"`
	Workflow string `json:"workflow"`
	Entityid string `json:"entityid"`
}

func (q *Queries) GetWFINstance(ctx context.Context, arg GetWFINstanceParams) (int64, error) {
	row := q.db.QueryRow(ctx, getWFINstance,
		arg.Slice,
		arg.App,
		arg.Workflow,
		arg.Entityid,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWFInstanceList = `-- name: GetWFInstanceList :many
SELECT id, entityid, slice, app, class, workflow, step, loggedat, doneat, nextstep, parent FROM public.wfinstance
WHERE 
   ($1::INTEGER is null OR slice = $1::INTEGER)
   AND ($2::text is null OR entityid = $2::text)
   AND ($3::text is null OR app = $3::text)
   AND ($4::text is null OR workflow = $4::text)
   AND($5::INTEGER is null OR  parent = $5::INTEGER)
`

type GetWFInstanceListParams struct {
	Slice    pgtype.Int4 `json:"slice"`
	Entityid pgtype.Text `json:"entityid"`
	App      pgtype.Text `json:"app"`
	Workflow pgtype.Text `json:"workflow"`
	Parent   pgtype.Int4 `json:"parent"`
}

func (q *Queries) GetWFInstanceList(ctx context.Context, arg GetWFInstanceListParams) ([]Wfinstance, error) {
	rows, err := q.db.Query(ctx, getWFInstanceList,
		arg.Slice,
		arg.Entityid,
		arg.App,
		arg.Workflow,
		arg.Parent,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wfinstance
	for rows.Next() {
		var i Wfinstance
		if err := rows.Scan(
			&i.ID,
			&i.Entityid,
			&i.Slice,
			&i.App,
			&i.Class,
			&i.Workflow,
			&i.Step,
			&i.Loggedat,
			&i.Doneat,
			&i.Nextstep,
			&i.Parent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWFInstanceListByParents = `-- name: GetWFInstanceListByParents :many
SELECT id, entityid, slice, app, class, workflow, step, loggedat, doneat, nextstep, parent FROM public.wfinstance
WHERE 
   ($1::INTEGER[] IS NOT NULL AND id = ANY($1::INTEGER[]))
`

func (q *Queries) GetWFInstanceListByParents(ctx context.Context, id []int32) ([]Wfinstance, error) {
	rows, err := q.db.Query(ctx, getWFInstanceListByParents, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wfinstance
	for rows.Next() {
		var i Wfinstance
		if err := rows.Scan(
			&i.ID,
			&i.Entityid,
			&i.Slice,
			&i.App,
			&i.Class,
			&i.Workflow,
			&i.Step,
			&i.Loggedat,
			&i.Doneat,
			&i.Nextstep,
			&i.Parent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
